1.5 One Away

Input: pale, ale, Output: true
Input: pale, bale, Output: true
Input: pale, pale, Output: true
Input: pales, pale, Output: true
Input: paled, ale, Output: false 


We can solve this question by using a hashset and a different character counter.
If we find a character that isn't in both string, we increment our counter.
If the counter is more than 1, we return false, otherwise true.

public static boolean isOneAway(String a, String b) {
	if (Math.abs(a.length() - b.length()) > 1 ) {
		return false;
	}

	int[] occurrences = new int[26];
	Arrays.fill(occurrences, 0);

	for (int i = 0; i < a.length(); i++) {
		occurrences[a.charAt(i) - 'a']++;
	}

	for (int i = 0; i < b.length(); i++) {
		occurrences[b.charAt(i) - 'a']--;
	}

	int diff = 0;
	for (int i = 0; i < occurrences.length; i++) {
		if (occurrences[i] == 1) {diff++;}
		if (occurrences[i] > 1 || diff > 1) {
			return false;
		}
	}
	return true;
}
